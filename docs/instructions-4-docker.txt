# --> Install the tensorflow's latest-gpu image

# Pull and install GPU-enabled tesnorflow docker image:
docker pull tensorflow/tensorflow:latest-gpu
(or "docker pull tensorflow/tensorflow:latest-gpu-jupyter")
docker run --gpus all -it --rm tensorflow/tensorflow:latest-gpu

# To test, open the container:
docker run --gpus all -it tensorflow/tensorflow:latest-gpu bash

# Open python terminal from inside the container:
python

# And check if tensorflow can see the GPU
import tensorflow as tf
tf.config.list_physical_devices('GPU')



--> Inherit from tensorflow's latest-gpu image to build new docker image (called projects/tensorflow:cnn2d, having custom project in /home/cnn2d)

# Create a Dockerfile specifying the following:
FROM tensorflow/tensorflow:latest-gpu
MAINTAINER whatever
WORKDIR /home/cnn2d
COPY . ./
RUN pip install --upgrade pip
RUN pip install -r requirements.txt

# Build the new docker image projects/tensorflow:cnn2d
docker image build -t projects/tensorflow:cnn2d ~/cnn2d

***ACHTUNG: never copy data inside the docker image, thus if your data folder is in the same directory as the Dockerfile, specify the data folder in the .dockerignore and mount this folder in the container when running the script in order for it to see the local data folder***

# Check whether it was successfully built
docker images

# Run the container
docker run --gpus all -it projects/tensorflow:cnn2d bash

# Mount data folder in the container
docker run -v $PWD/cnn2d/data:/home/cnn2d/data --gpus all -it projects/tensorflow:cnn2d bash

# Mount data folder in the container and run the script
docker run -v $PWD/cnn2d/data:/home/cnn2d/data --gpus all -it projects/tensorflow:cnn2d python ./code/densenet-2channels.py  --data_path ./data/N-MNIST  --validation_split 0.2  --batch_size 100  --epochs 300  --lr 0.01  --dropout 0.2  --early_stopping  --patience 20
